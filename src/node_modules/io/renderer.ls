class Renderer
	render: (input) ->
		render-paragraphs = (list) ~>
			output = for item in list
				switch typeof! item
				| 'String' => item
				| 'Array' => @list item
				| _ => throw {
					msg: 'Unsupported paragraph type in section content'
					type: typeof! item
					item
				}
			output.join '\n\n'

		render-section = (object, level = 1) ~>
			output = for section, content of object
				[
					@section section, level
					''

					switch typeof! content
					| 'Object' => [
						render-section content, level + 1
					] * '\n'
					| 'Array' => render-paragraphs content
					| _ => throw {
						msg: 'Unsupported section content'
						type: typeof! content
						content
					}

					''
				] * '\n'
			output.join '\n'

		render-section input

	list: (list, level = 1) ->
		output = for item in list
			switch typeof! item
			| 'String', 'Number' => @list-item item, level
			| 'Array' => @list item, level + 1
			| _ => throw {
				msg: 'Unsupported list item'
				type: typeof! item
				item
			}
		output.join '\n'

	emphase: (input, {i = on, b = on} = {}) ->
		if i? => input = @italic input
		if b? => input = @bold input
		input

	italic: -> string.surround "#{@emphaseChar}" * @italicX, it
	bold: -> string.surround "#{@emphaseChar}" * @boldX, it





export Renderer
