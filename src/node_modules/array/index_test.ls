require! {
	'tester'
# ------------------------------------------------------------------------ Input
	array: './'
}

{Logger} = tester.logger
$logger = Logger!



# split ------------------------------------------------------------------------

$logger.separator 'Split'
$logger.on!

data = [1 2 3 4 5 6 7 8 9 10 11]
empty = []
one = [1]

$logger.fail -> array.split void void
$logger.fail -> array.split void data
$logger.fail -> array.split 0 void

$logger.fail -> array.split '1' data # This use case fails, so we require an explicit Number now

$logger.fail -> array.split 0 data
$logger.fail -> array.split -1 data
$logger.fail -> array.split -5 data

collection = {0 1 2 3 4 5 6 7 8 9 10}
$logger.fail -> array.split 1 collection
collection.length = 11
$logger.log array.split 1 collection

$logger.log array.split 1 data
$logger.log array.split 2 data
$logger.log array.split 5 data

$logger.log array.split data.length - 1, data
$logger.log array.split data.length, data
$logger.log array.split data.length + 1, data

$logger.log array.split 1 empty
$logger.log array.split 2 empty
$logger.log array.split 5 empty

$logger.log array.split 1 one
$logger.log array.split 2 one
$logger.log array.split 5 one



# removeAt ---------------------------------------------------------------------

$logger.separator 'Remove at'
# $logger.on!

$logger.fail -> array.removeAt!

$logger.log data, 'Initial data: '

$logger.log (array.removeAt data, 0), 'At 0: '
$logger.log (array.removeAt data, 1), 'At 1: '
$logger.log (array.removeAt data, 5), 'At 5: '
$logger.log (array.removeAt data, 20), 'At 20: '

$logger.log (array.removeAt data, -1), 'At -1: '
$logger.log (array.removeAt data, -5), 'At -5: '

# remove -----------------------------------------------------------------------

$logger.separator 'Remove item'
# $logger.on!

item1 = {1}
item2 = {2}
item3 = {3}
data = [item1, item2, item3]

$logger.fail -> array.remove!
$logger.log array.remove data, item1
$logger.log array.remove data, null
$logger.log array.remove data, item3

# factory ----------------------------------------------------------------------

$logger.separator 'Factory'
# $logger.on!

$logger.log array.factory! # []
$logger.log array.factory void # [undefined]
$logger.log array.factory 1 # [1]
$logger.log array.factory 1 2 # [1 2]
$logger.log array.factory [1] # [1]
$logger.log array.factory [1] [2] # [[1] [2]]
$logger.log array.factory [1] [2] 1 2 # [[1] [2] 1 2]
$logger.log array.factory [1] [2] 1 void 2 # [[1] [2] 1 undefined 2]

# Sorting ----------------------------------------------------------------------

$logger.separator 'Sort by'
# $logger.on!

data = [
	{
		prop: 1
	}
	{
		prop: 2
	}
	{
		\fake
	}
	{
		prop: 0
	}
]

$logger.log data
$logger.log array.sortBy data, 'prop'
$logger.log array.sortBy data, 'prop' no

# Transform --------------------------------------------------------------------

$logger.separator 'Transform'
# $logger.on!

$logger.log array.transform (+ 1), [1 2 3 4 5]
data = [{prop: 1} {prop: 2} {prop: 3} {prop: 4} {prop: 5}]
$logger.log data
$logger.log array.transform (.prop), data, yes
$logger.log data
