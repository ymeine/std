require! {
	'packager'
	'type'
}

{typeof:$typeof} = type



checkString = (input, name) ->
	name ?= 'input'

	type = $typeof input
	if type isnt 'String' => throw {
		msg: "#name is not a string"
		type
		input
	}

	true

checkInput = (input, name) !->
	name ?= 'input'

	if not input? => throw {msg: "No #name given"}
	checkString input, name



################################################################################
# Case
################################################################################

capitalize = (input) ->
	if input.length is 0 => ''
	else input.0.toUpperCase! + input.slice 1

capitalize-safe = (input) ->
	checkInput input

	capitalize ...



################################################################################
# Splitting
################################################################################

array-split = (input, cb) ->
	# ----------------------------------------------- Input arguments processing

	if not input? => throw {
		msg: 'No input given'
	}

	if not input.length? => throw {
		msg: 'Given input cannot be iterated over'
		input
	}

	type = $typeof cb
	if type isnt 'Function' => throw {
		msg: 'Given callback is not a function'
		type
		cb
	}

	# --------------------------------------------------------------- Processing

	parts = []
	currentPart = []
	for item, index in input
		infos = cb {
			item
			index
			input
			parts
		}

		infos.split ?= no
		infos.keep ?= yes
		# infos.abort ?= no

		if infos.split
			parts.push currentPart
			currentPart = []
			if infos.keep
				currentPart.push item
		else
			currentPart.push item

	parts.push currentPart

	if parts.0?length is 0 => parts.shift!

	parts

split = (input, cb) ->
	parts = array-split ...
	[part.join '' for part in parts]



splitAt = (input, indexes) ->
	# ----------------------------------------------- Input arguments processing

	if not indexes? => throw {
		msg: 'No indexes given'
	}

	if not indexes.length? => throw {
		msg: 'Given indexes is not a proper array'
		indexes
	}

	# ------------------------------------------------------ Processing & return

	split input, ({index}) -> {
		split: index in indexes
		+keep
	}



getCamelCaseParts = (input) ->
	# ------------------------------------------------------ Processing & return

	capitals = ['A' to 'Z']
	split input, ({item}) -> {
		split: item in capitals
		+keep
	}

getCamelCaseParts-safe = (input) ->
	checkInput input

	getCamelCaseParts ...



################################################################################
# Escaping
################################################################################

escape = (input, chars, escapeChar) ->
	# ----------------------------------------------- Input arguments processing

	escapeChar ?= '\\'

	# ------------------------------------------------------ Processing & return

	alternatives = ["\\#char" for char in chars] * ''
	regexp = new RegExp "[#alternatives]" \g
	input.replace regexp, "#{escapeChar}$&"

escape-silent = (input, chars, escapeChar) ->
	input ?= "#input"

	chars ?= []

	escape input, chars, escapeChar

escape-safe = (input, chars, escapeChar) ->
	checkInput input

	escape-silent



################################################################################
# Wrapping
################################################################################

surround = (string, input) -->
	"#string#input#string"

surround-safe = (string, input) -->
	if not string? => throw {msg: 'No string given'}
	if not input? => throw {msg: 'No input given'}

	surround ...



wrap = (string, input) -->
	"#string#input#{reverse string}"

wrap-safe = (string, input) -->
	if not string? => throw {msg: 'No string given'}
	if not input? => throw {msg: 'No input given'}

	wrap ...



################################################################################
# Reverse
################################################################################

reverse = (input) ->
	input.split '' .reverse!join ''

reverse-safe = (input) ->
	checkInput input

	reverse ...



################################################################################
# Overwriting
################################################################################

replace = (input, content, start, end) ->
	# ----------------------------------------------- Input arguments processing

	start ?= 0
	end ?= start + content.length

	# ------------------------------------------------------ Processing & return

	(input.substring 0, start) + content + (input.substring end, input.length)

replace-safe = (input, content) ->
	checkInput input, 'input'
	checkInput input, 'content'

	replace ...



insert = (string, content, offset) ->
	# ----------------------------------------------- Input arguments processing
	offset ?= 0
	# --------------------------------------------------------------- Processing
	replace string, content, offset, offset

insert-safe = (string, content, offset) ->
	# ----------------------------------------------- Input arguments processing
	offset ?= 0
	# --------------------------------------------------------------- Processing
	replace-safe string, content, offset, offset





################################################################################
# Exports
################################################################################

packager.export {
	module

	values: [
		{
			value: capitalize-safe
			names: <[
				capitalize
			]>
		}
		{
			value: split
			names: <[
				split
			]>
		}
		{
			value: splitAt
			names: <[
				splitAt
				splitat
			]>
		}
		{
			value: getCamelCaseParts-safe
			names: <[
				getCamelCaseParts
				camelCaseParts
				camelcaseparts
				camelCase
				camelcase
			]>
		}
		{
			value: escape-safe
			names: <[
				escape
				esc
			]>
		}
		{
			value: surround-safe
			names: <[
				surround
			]>
		}
		{
			value: reverse-safe
			names: <[
				reverse
				invert
			]>
		}
		{
			value: wrap-safe
			names: <[
				wrap
			]>
		}
		{
			value: replace-safe
			names: <[
				replace
				overwrite
				rewrite
			]>
		}
		{
			value: insert-safe
			names: <[
				insert
				put
			]>
		}
	]
}
