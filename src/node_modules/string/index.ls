require! {
	'packager'
	'number'
	'type'
}



_checkInput = (input) !->
	if not input? => throw {msg: 'No input given'}

	type = typeof! input
	if type isnt 'String' => throw {
		msg: 'Input is not a string'
		type
		input
	}


# ------------------------------------------------------------------------------

/** Capitalizes the first letter of the word, leaving the rest as is */
capitalize = (input) ->
	if input.length is 0 => ''
	else input.0.toUpperCase! + input.slice 1

capitalize-safe = (input) ->
	_checkInput input

	capitalize ...



# ------------------------------------------------------------------------------

/** Splits a string on capital letters, keeping them */
getCamelCaseParts = (input) ->
	allParts = input.split /([A-Z])/g

	splitParts = allParts[1 to]
	joinedParts = [[part, splitParts[index + 1]].join '' for part, index in splitParts by 2]

	if allParts.0.length is 0 => joinedParts
	else [allParts.0] ++ joinedParts

getCamelCaseParts-safe = (input) ->
	_checkInput input

	getCamelCaseParts ...



# ------------------------------------------------------------------------------

escape = (input, chars, escapeChar) ->
	chars ?= []
	escapeChar ?= '\\'

	alternatives = ["\\#char" for char in chars] * ''
	regexp = new RegExp "[#alternatives]" \g
	input.replace regexp, "#{escapeChar}$&"

escape-safe = (input) ->
	if not input? => throw {msg: 'No input given'}

	escape ...



# ------------------------------------------------------------------------------

surround = (string, input) --> "#string#input#string"

surround-safe = (string, input) -->
	if not string? => throw {msg: 'No string given'}
	if not input? => throw {msg: 'No input given'}

	surround ...



# ------------------------------------------------------------------------------

reverse = (string) -> string.split '' .reverse!join ''

reverse-safe = (string) ->
	if not string? => throw {msg: 'No string given'}

	reverse ...


# ------------------------------------------------------------------------------

wrap = (string, input) --> "#string#input#{reverse string}"

wrap-safe = (string, input) -->
	if not string? => throw {msg: 'No string given'}
	if not input? => throw {msg: 'No input given'}

	wrap ...



# ------------------------------------------------------------------------------

replace = (string, content, start, end) ->
	start ?= 0
	end ?= start + content.length

	(string.substring 0, start) + content + (string.substring end, string.length)

replace-safe = (string, content) ->
	if not string? => throw {msg: 'No string given'}
	if not content? => throw {msg: 'No content given'}

	replace ...

# ------------------------------------------------------------------------------

insert = (string, content, offset) -> replace string, content, offset, offset
insert-safe = (string, content, offset) -> replace-safe string, content, offset, offset



# ------------------------------------------------------------------------------

packager.export {
	module

	values: [
		{
			value: capitalize-safe
			names: <[
				capitalize
			]>
		}
		{
			value: getCamelCaseParts-safe
			names: <[
				getCamelCaseParts
				camelCaseParts
				camelcaseparts
				camelCase
				camelcase
			]>
		}
		{
			value: escape-safe
			names: <[
				escape
			]>
		}
		{
			value: surround-safe
			names: <[
				surround
			]>
		}
		{
			value: reverse-safe
			names: <[
				reverse
				invert
			]>
		}
		{
			value: wrap-safe
			names: <[
				wrap
			]>
		}
		{
			value: replace-safe
			names: <[
				replace
				overwrite
				rewrite
			]>
		}
		{
			value: insert-safe
			names: <[
				insert
				put
			]>
		}
	]
}
