require! {
# ---------------------------------------------------------------------- Own STD
	'tester'
# ------------------------------------------------------------------------ Input
	string: './'
}

{Logger} = tester.logger
$logger = Logger!



# Capitalize -------------------------------------------------------------------

$logger.separator 'Capitalize'
$logger.on!

$logger.fail -> string.capitalize!
$logger.log string.capitalize ''
$logger.log string.capitalize 'a'
$logger.log string.capitalize 'A'
$logger.log string.capitalize 'aA'
$logger.log string.capitalize 'Aa'
$logger.log string.capitalize 'AA'
$logger.log string.capitalize '-'
$logger.log string.capitalize '-a'
$logger.log string.capitalize '-A'

# Camel case -------------------------------------------------------------------

$logger.separator 'Camel case'
$logger.on!

$logger.fail -> string.getCamelCaseParts!
$logger.log string.getCamelCaseParts ''
$logger.log string.getCamelCaseParts 'a'
$logger.log string.getCamelCaseParts 'A'
$logger.log string.getCamelCaseParts 'aBCD'
$logger.log string.getCamelCaseParts 'aBooChooDoo'
$logger.log string.getCamelCaseParts 'This is a custom PhrAse-with_lotof bullshit'

# Escape -----------------------------------------------------------------------

$logger.separator 'Escape'
$logger.on!

sample = 'I have special chars: \\, [, ], ...'
chars = '\\[]'
escapeChar = '@'
$logger.log sample, 'Sample: '
$logger.log chars, 'Chars to escape: '
$logger.log escapeChar, 'Escape char: '

$logger.fail -> string.escape!

$logger.log string.escape sample
$logger.log string.escape sample, chars
$logger.log string.escape sample, chars, escapeChar
$logger.log string.escape sample, , escapeChar

# Surround ---------------------------------------------------------------------

$logger.separator 'Surround'
$logger.on!

sample = 'str'
$logger.log sample

$logger.fail -> string.surround!
$logger.fail -> string.surround '' void
$logger.fail -> string.surround void sample

$logger.log string.surround '' sample
$logger.log string.surround 5 sample
$logger.log string.surround on sample
$logger.log string.surround '#' sample

# Reverse ----------------------------------------------------------------------

$logger.separator 'Reverse'
$logger.on!

sample = 'hello'
$logger.log sample

$logger.fail -> string.reverse!

$logger.log string.reverse sample

# Wrap -------------------------------------------------------------------------

$logger.separator 'Wrap'
$logger.on!

$logger.fail -> string.wrap!

$logger.log string.wrap '### ', 'Title'

# Replace ----------------------------------------------------------------------

$logger.separator 'Replace'
$logger.on!

sample = 'Hello myself, how are you?'
$logger.log sample

$logger.fail -> string.replace!
$logger.fail -> string.replace '' void

$logger.log string.replace sample, 'yourself' 6 12

# Replace ----------------------------------------------------------------------

$logger.separator 'Insert'
$logger.on!

sample = 'Hello!'
$logger.log sample

$logger.fail -> string.insert!
$logger.fail -> string.insert '' void

$logger.log string.insert sample, ' myself' 5
