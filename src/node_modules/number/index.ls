require! {
# -------------------------------------------------------------------------- 3rd
	lodash
# ---------------------------------------------------------------------- Own STD
	'packager'
	'array'
}

# -------------------------------------------------------------------------- Sum

_sumParts = (list) ->
	# if list.length is 0 => return NaN

	result = 0
	for part in list => result += _sumPart part
	result

_sumPart = (arg) ->
	switch typeof! arg
	| 'Number' => arg
	| 'Array' => _sumParts arg
	| _ => 0
	# | _ => NaN

sum = ->
	_sumParts &

sumList = (list) ->
	result = 0
	for number in list => result += number
	result


# ------------------------------------------------------------------------- Mean

_getList = ->
	list = lodash.flatten &
	list = lodash.reject list, (not) << (?)
	list

mean = ->
	list = _getList ...

	if list.length is 0 => NaN
	else (sumList list) / (list.length)



# ----------------------------------------------------------------------- Parity

isOdd = (value) ->
	if not value? => throw {
		msg: '''No value provided for function 'isOdd'.'''
	}

	(value % 2) > 0

isEven = isOdd >> (not)




# ------------------------------------------------------------------------------

packager.export {
	module

	values: [
		{
			value: sum
			names: <[
				sum
			]>
			api:
				desc: '''
					Sums the given numbers.

					These numbers are the only arguments of the function, so you can pass it through any argument. You can also pass arrays of numbers in addition to simple numbers, nested or not.
				'''
		}
		{
			value: mean
			names: <[
				mean
				average
			]>
			api:
				desc: '''
					Calculates the mean value of the given numbers.

					These numbers are the only arguments of the function, so you can pass it through any argument. You can also pass arrays of numbers in addition to simple numbers, nested or not.
				'''
		}
		{
			value: isOdd
			names: <[
				isOdd
				isodd
				odd
			]>
			api:
				desc: '''Tells if the given argument is an odd number or not.'''
		}
		{
			value: isEven
			names: <[
				isEven
				iseven
				even
			]>
			api:
				desc: '''
					Tells if the given argument is an even number or not.

					It is defined as the opposite of `isOdd`.
				'''
		}
	]
}
