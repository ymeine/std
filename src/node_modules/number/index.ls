require! {
# -------------------------------------------------------------------------- 3rd
	lodash
# ---------------------------------------------------------------------- Own STD
	'packager'
	'array'
}

# -------------------------------------------------------------------------- Sum

_sumParts = (list) ->
	# if list.length is 0 => return NaN

	result = 0
	for part in list => result += _sumPart part
	result

_sumPart = (arg) ->
	switch typeof! arg
	| 'Number' => arg
	| 'Array' => _sumParts arg
	| _ => 0
	# | _ => NaN

sum = ->
	_sumParts &

sumList = (list) ->
	result = 0
	for number in list => result += number
	result


# ------------------------------------------------------------------------- Mean

_getList = ->
	list = lodash.flatten &
	list = lodash.reject list, (not) << (?)
	list

mean = ->
	list = _getList ...

	if list.length is 0 => NaN
	else (sumList list) / (list.length)



# ----------------------------------------------------------------------- Parity

isOdd = (value) ->
	if not value? => throw {
		msg: '''No value provided for function 'isOdd'.'''
	}

	(value % 2) > 0

isEven = isOdd >> (not)




# ------------------------------------------------------------------------------

packager.export {
	module

	values: [
		{
			value: sum
			names: <[
				sum
			]>
		}
		{
			value: mean
			names: <[
				mean
				average
			]>
		}
		{
			value: isOdd
			names: <[
				isOdd
				isodd
				odd
			]>
		}
		{
			value: isEven
			names: <[
				isEven
				iseven
				even
			]>
		}
	]
}
